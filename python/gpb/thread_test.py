import threading
from socket import *
import time

run_num = 10
info_num = 5
thread_num = 300


class TaskThread(threading.Thread):
    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name

    def run(self):
        client_socket = socket(AF_INET, SOCK_DGRAM)
        # print('线程-{} 开始工作 !'.format(self.name))
        for _ in range(run_num):
            server_name = '127.0.0.1'
            server_port = 8877
            # print('{} 开始向 {} : {} 发送 {} 条信息!'.format(self.name, server_name, server_port, info_num))
            message = b'\n\x10GW01:172.10.10.1\x10\x00"ointerface-1:/junos/system/linecard/interface/logical/usage/:/junos/system/linecard/interface/logical/usage/:PFE(\xbf\x020\x90\xe2\x88\xf1\xb6/8\x01@\x01\xaa\x06\xab\n\xe2\xa4\x01\xa6\n:\xa3\n\n-\n\x0exe-0/1/3.16386\x10\xde\xc6\xf3\x88\x06\x18\xdc\x05*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x06\n\x04down\n-\n\x0exe-0/1/4.16386\x10\xde\xc6\xf3\x88\x06\x18\xdd\x05*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x06\n\x04down\n-\n\x0exe-0/1/5.16386\x10\xde\xc6\xf3\x88\x06\x18\xde\x05*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x06\n\x04down\n-\n\x0exe-0/1/6.16386\x10\xde\xc6\xf3\x88\x06\x18\xdf\x05*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x06\n\x04down\n-\n\x0exe-0/1/7.16386\x10\xde\xc6\xf3\x88\x06\x18\xe0\x05*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x06\n\x04down\n4\n\rxe-0/1/2.2000\x10\xbd\xf9\xfd\x88\x06\x18\xe2\x05"\x08ae3.2000*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2001\x10\xbd\xf9\xfd\x88\x06\x18\xe4\x05"\x08ae3.2001*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2002\x10\xbd\xf9\xfd\x88\x06\x18\xe6\x05"\x08ae3.2002*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2003\x10\xbd\xf9\xfd\x88\x06\x18\xe7\x05"\x08ae3.2003*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2004\x10\xbd\xf9\xfd\x88\x06\x18\xe8\x05"\x08ae3.2004*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2005\x10\xbd\xf9\xfd\x88\x06\x18\xeb\x05"\x08ae3.2005*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2006\x10\xbd\xf9\xfd\x88\x06\x18\xec\x05"\x08ae3.2006*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2007\x10\xbd\xf9\xfd\x88\x06\x18\xee\x05"\x08ae3.2007*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2008\x10\xbd\xf9\xfd\x88\x06\x18\xf7\x05"\x08ae3.2008*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2009\x10\xbd\xf9\xfd\x88\x06\x18\xf8\x05"\x08ae3.2009*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2010\x10\xbd\xf9\xfd\x88\x06\x18\x83\x06"\x08ae3.2010*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2011\x10\xbd\xf9\xfd\x88\x06\x18\x87\x06"\x08ae3.2011*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2012\x10\xbd\xf9\xfd\x88\x06\x18\x89\x06"\x08ae3.2012*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2013\x10\xbd\xf9\xfd\x88\x06\x18\x8a\x06"\x08ae3.2013*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2014\x10\xbd\xf9\xfd\x88\x06\x18\x90\x06"\x08ae3.2014*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2015\x10\xbd\xf9\xfd\x88\x06\x18\x91\x06"\x08ae3.2015*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2016\x10\xbd\xf9\xfd\x88\x06\x18\x92\x06"\x08ae3.2016*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2017\x10\xbd\xf9\xfd\x88\x06\x18\x96\x06"\x08ae3.2017*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2018\x10\xbd\xf9\xfd\x88\x06\x18\x98\x06"\x08ae3.2018*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up\n4\n\rxe-0/1/2.2019\x10\xbd\xf9\xfd\x88\x06\x18\x99\x06"\x08ae3.2019*\x04\x08\x00\x10\x002\x04\x08\x00\x10\x00:\x04\n\x02up'
            for _ in range(info_num):
                client_socket.sendto(message, (server_name, server_port))
            time.sleep(1)

        client_socket.close()


if __name__ == '__main__':
    print('测试开始，本次将会开启 {} 个线程， 每个线程每秒将连续发送{} 个消息，共计执行 {} s --'.format(
        thread_num, info_num, run_num))
    start = time.perf_counter()
    thread_list = []
    sleep_time = round(1/thread_num, 4)
    for index in range(thread_num):
        tt = TaskThread(index + 1)
        tt.start()
        thread_list.append(tt)
        time.sleep(sleep_time)

    for t in thread_list:
        t.join()
    print('执行用时 ： {}'.format(time.perf_counter() - start))
    print('共计发送 {} 个请求: 应该打印 {} 行日志'.format(
        run_num * info_num * thread_num, run_num * info_num * thread_num * 25))

    time.sleep(1)
    print("等待关闭server服务以获取到准确的日志数量！")
    time.sleep(5)
    import subprocess
    output = subprocess.Popen(
        'cat /root/telemetry/test/gpb/log.out | wc -l', stdout=subprocess.PIPE, shell=True).communicate()
    print('日志实际输出 {} 行！'.format(output[0].decode('utf-8').replace('\n', '')))


