# -*- coding: utf-8 -*-
"""
2021年07月25日需求：为pipe补充5分钟计量缺失数据
脚本执行路径：/data/mongo
"""
import pymongo
from datetime import datetime, timedelta
import utils_logger

logger = utils_logger.get_logger('test')

data_list = [
    ('6d93eb1a-1384-11e7-9b2f-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 42232636.0, 30595098.0),
    ('e66b2cae-3f74-11eb-9ba4-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 154806862.0, 281975808.0),
    ('aa9ed86e-3489-11e7-9bd7-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 14459738.0, 112001797.0),
    ('07ce0d50-3d6e-11ed-9be2-7a4d1b50eb70', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 1214474886.0, 1097254637.0),
    ('30aa2a22-0653-11ec-9ca9-0a0d265d6421', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 188572566.0, 347984277.0),
    ('4e117584-0653-11ec-9ca9-0a0d265d6421', '2023-07-03 07:05:00', '2023-07-03 14:50:00', 110920001.0, 201997800.0),
    ('b4da54c8-7a1a-11ea-9cce-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 4702694.0, 11027154.0),
    ('98e60cde-da94-11ed-a44e-f231ff4a4619', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 195203269.0, 359383625.0),
    ('63f40dc8-0073-11ee-a4aa-e27800858960', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 633668681.0, 651562230.0),
    ('522db06e-4d47-11e9-a5a9-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 152465.0, 447045.0),
    ('71481812-9d13-11e7-a5a9-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 8394862.0, 11253663.0),
    ('e3a4bbe0-d8a1-11eb-a658-66b604e0fc30', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 555926.0, 5691264.0),
    ('4ef1ac50-da94-11ed-a66b-46031ca657c1', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 139762888.0, 257040900.0),
    ('f3e01116-da94-11ed-a66b-46031ca657c1', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 35979732.0, 62871481.0),
    ('c9391e8e-0220-11eb-917d-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 329600798.0, 462508277.0),
    ('37633a14-da93-11ed-91aa-0aa2801fde7c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 146615218.0, 269203704.0),
    ('4c219f5e-ca2b-11ed-91aa-0aa2801fde7c', '2023-07-03 09:50:00', '2023-07-03 12:05:00', 52428800.0, 52428800.0),
    ('7a3047fc-a97b-11ea-9de2-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 4836080.0, 34033290.0),
    ('5477c660-6e2d-11e8-9de7-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 198988.0, 336952.0),
    ('f9f37066-6e06-11e8-9de7-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 297310.0, 788478.0),
    ('5d2545ee-4dbd-11ec-9fa7-b6e127184f5c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5163244.0, 346995042.0),
    ('b34c6384-0971-11ec-9fe6-b2b9c6307213', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5198287.0, 321492204.0),
    ('1d2170cc-d532-11e9-a6a3-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 407462.0, 1900998.0),
    ('ea05b11c-1ffe-11eb-a8a1-9e8c70d0b97c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 300950059.0, 438863577.0),
    ('3e14dae2-106a-11ec-a927-42eb08fb76b5', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 4407546.0, 284855701.0),
    ('77d8dc9c-106a-11ec-9450-e2cb0b669b1c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 4253404.0, 268794936.0),
    ('ad309492-37b7-11ec-9452-ca37523ce2f0', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 63887103.0, 95377070.0),
    ('e621a65a-bc6f-11ec-94ab-9ac9f53c252e', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 2309799.0, 3680291.0),
    ('2d233cba-d50d-11ed-952b-0ead82b177d6', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 361630626.0, 652680537.0),
    ('cd508830-9d78-11e9-9555-0242ac110002', '2023-07-03 07:05:00', '2023-07-03 14:50:00', 168298596.0, 178453376.0),
    ('cf0cd684-140b-11ee-a0eb-de246b3586fa', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 169589170.0, 119893214.0),
    ('19496640-c57d-11e9-a13c-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 2586681.0, 15943987.0),
    ('af8a4240-558d-11eb-a145-7e8814e175f2', '2023-07-03 07:10:00', '2023-07-03 14:50:00', 269370412.0, 344950378.0),
    ('7de48f06-ee0c-11ed-a219-e24846a47d7c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10320525.0, 10805534.0),
    ('29d3919c-c080-11ec-aed2-627563e71072', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 1379910.0, 13969652.0),
    ('28f3ec58-a870-11ed-aee1-de2f0948d04f', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 80702470.0, 109282241.0),
    ('1059215e-ef4e-11eb-af26-4a4da524a1e3', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 98217890.0, 204858756.0),
    ('3cce0ae6-2650-11e6-a9e5-0050569b1b91', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 1896791.0, 24363601.0),
    ('8202ebc6-d685-11e8-aa43-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 266885252.0, 358371696.0),
    ('a5e737ea-3d74-11ed-aa8f-6671cb502ca7', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 1770499.0, 4590932.0),
    ('4b34df32-d50e-11ed-ab1e-628b23244178', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 261309185.0, 490239105.0),
    ('f3980c66-d50a-11ed-ab1e-628b23244178', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 348815532.0, 637748330.0),
    ('236895ee-ab3d-11ec-ac2b-ea07e6f66a5e', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 15024167.0, 33713458.0),
    ('4b61b17c-35e4-11eb-a38c-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 5570823.0, 442255.0),
    ('2d39e8ea-e29c-11ea-a3f9-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 8531032.0, 67692919.0),
    ('4a40d3ce-bccc-11ed-97b3-02ead2bfe4a5', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 14331863.0, 2312870.0),
    ('a4c63536-300e-11e9-9814-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 3415117.0, 58276378.0),
    ('431532bc-d254-11ea-9871-eec4b6639f54', '2023-07-03 07:15:00', '2023-07-03 14:50:00', 457060332.0, 586271949.0),
    ('142bfcb4-44e7-11eb-9971-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 1287354.0, 12990052.0),
    ('3dc35010-45ee-11eb-9971-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 495876140.0, 687829369.0),
    ('ac66640e-01d4-11ee-8007-6e3048f796e3', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 649113373.0, 666536979.0),
    ('fda261f4-db2f-11e8-812d-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 6473284.0, 13813076.0),
    ('df43ab4e-d57f-11eb-81f5-0a451bcb0c0c', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 5573505.0, 5356780.0),
    ('4fd8ee18-7188-11e9-822e-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 31212276.0, 26569902.0),
    ('1f9bc4b4-9a81-11ea-ac72-0242ac110002', '2023-07-03 07:10:00', '2023-07-03 14:50:00', 69109176.0, 119557246.0),
    ('97a47034-5cab-11ed-ac81-5abe414e1a60', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 5823094.0, 998127.0),
    ('0835bdf6-d50d-11ed-99a1-6e69bd70e22f', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 355076531.0, 646590022.0),
    ('7fde0568-0979-11ec-99c3-4240b49eb020', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5805895.0, 367844587.0),
    ('b1fc5fec-0652-11ec-99c3-4240b49eb020', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 125082488.0, 220822556.0),
    ('ecf5e6e0-0486-11ec-99c3-4240b49eb020', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 1859375.0, 1869485.0),
    ('b471d440-8fbb-11eb-99f8-5a11cc4b85ab', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 44822111.0, 80451152.0),
    ('2af020a8-ed15-11ea-892f-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 3044293.0, 19009218.0),
    ('8be23972-3b38-11e9-8931-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 333526281.0, 523930294.0),
    ('0ce33d50-900b-11ea-8948-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 486740.0, 12366274.0),
    ('9ba9be50-0052-11ee-897b-6a6fa8c8be77', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 3021267591.0, 2934039678.0),
    ('e7a629e4-0073-11ee-897b-6a6fa8c8be77', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 725994231.0, 752427795.0),
    ('c2f2b2d8-0411-11ee-8988-16d02927cb1c', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 224365010.0, 204033030.0),
    ('7fe25b7c-b0c7-11ec-89fa-9698f08c9abc', '2023-07-03 07:05:00', '2023-07-03 14:50:00', 2425178100.0, 3098823778.0),
    ('a356889a-d304-11eb-82c2-aa84ff328b83', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 117329.0, 124925.0),
    ('c18e8896-fc15-11eb-834a-963f594f9341', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 9112729.0, 633044453.0),
    ('1821db90-d57e-11eb-8362-a2a3ffcae8a6', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 4224026.0, 16437540.0),
    ('9e6023de-d703-11eb-8362-a2a3ffcae8a6', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 26422.0, 50401.0),
    ('7f2f4b9c-c47a-11ec-8453-6a175f873bac', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 43674447.0, 15639683.0),
    ('c40999b6-5688-11ed-847d-9ea29165e650', '2023-07-03 07:10:00', '2023-07-03 14:50:00', 799146912.0, 976328390.0),
    ('62344e6e-f3ce-11ed-84e2-4afb93dc55b6', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 2898115513.0, 2866995474.0),
    ('4c6b0d3c-6627-11ed-afd8-9696273e3b8e', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 5567708.0, 883919322.0),
    ('2a44861c-37bf-11ec-b0ec-3e24e6186d68', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 11452790.0, 21511848.0),
    ('c9b3f5b0-f978-11ea-b127-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 1185443.0, 26882589.0),
    ('b8bd3cb8-0e3d-11ed-b153-3295b654f4a1', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 2598698.0, 2325311.0),
    ('722ade3e-5a7a-11ed-8b60-a242e20c443c', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 11879531.0, 5289115.0),
    ('f484a5ac-35e4-11eb-8c3c-f262ed27a340', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 454096.0, 5563261.0),
    ('602998f6-5a7a-11ed-8cad-2690089e7430', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 7277666.0, 14228758.0),
    ('7179ccca-6295-11ed-8ce3-2ea71e6169a0', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 1061139.0, 1849261.0),
    ('4a6bb28c-fd9c-11ec-856a-e2053235fe57', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 557629722.0, 761026546.0),
    ('b1e459aa-65d1-11eb-8570-c288d273374c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 1315731.0, 16647751.0),
    ('1a0c2692-f786-11ec-8599-2a0863c725c8', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 346527216.0, 613708606.0),
    ('e15d9e5e-1f35-11eb-8724-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 8896589.0, 129301584.0),
    ('0a5f399c-b5ad-11e8-8733-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 76923087.0, 29702528.0),
    ('79c4e872-297d-11eb-878f-16a7c444bba7', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 229548898.0, 294300096.0),
    ('c6bcc3a0-e69f-11ea-879c-aaabacf039f0', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 32768040.0, 110691540.0),
    ('be5924ce-cfe5-11ed-8dcf-e65ef2b9c70e', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 323401455.0, 591149996.0),
    ('3e4a3f24-ed73-11ed-8dd4-b68111c315ad', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10329457.0, 10818100.0),
    ('fc9a795e-f312-11ed-8dd4-b68111c315ad', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 981620387.0, 997529329.0),
    ('6f8595de-1378-11eb-8f45-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5708448.0, 7403488.0),
    ('22670088-fb9d-11e9-8f90-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 387530211.0, 424976122.0),
    ('1c52032e-aa6d-11ec-903c-e22a7879871b', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 1736996.0, 4369515.0),
    ('e6e8c954-b7fc-11ed-90a4-2e62f2e571b7', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 8053049.0, 35133052.0),
    ('df7bd7bc-f6f1-11e9-90ac-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 1900117.0, 431460.0),
    ('b7193566-fb76-11ed-b59f-6645250f7e2f', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 9243220.0, 51039678.0),
    ('de60b252-4bff-11ec-b6a5-1ebe42b2cb1f', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 2326835.0, 14713138.0),
    ('75b4ee84-987c-11ec-b6b5-eed6f069f451', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 473769.0, 73551378.0),
    ('86dd6b5a-f48d-11ed-b796-76fc3df52df9', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10362117.0, 10827563.0),
    ('ad8601f8-3ece-11eb-8814-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 15147761.0, 142233938.0),
    ('0e933b64-c7ff-11eb-886f-6e6644234031', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 215873.0, 6671666.0),
    ('35f92348-a0a5-11eb-88d7-3abd46b3c55c', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 116148640.0, 399758376.0),
    ('49254748-0979-11ec-b86b-b6ad88170f21', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 4254013.0, 265945805.0),
    ('a3e078ac-096e-11ec-b86b-b6ad88170f21', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5100234.0, 317880272.0),
    ('a41443e6-106a-11ec-b86b-b6ad88170f21', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5386112.0, 336785349.0),
    ('12366fc6-ee0d-11ed-b907-86a325c62e30', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10372330.0, 10785293.0),
    ('d8bf7d82-ee0c-11ed-b907-86a325c62e30', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10344829.0, 10844516.0),
    ('0c637b48-106a-11ec-b95a-4ef1a5776a66', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5068022.0, 303153908.0),
    ('d2917a72-106a-11ec-b95a-4ef1a5776a66', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 47120940.0, 293418609.0),
    ('2390643c-5823-11ed-ba6f-ee2aa9fca8c5', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 5179270.0, 880938.0),
    ('b5341bf0-84a5-11e8-bc6e-0242ac110002', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 22641328.0, 204692683.0),
    ('22d06b16-4d96-11ec-bc9f-5e8369171c3d', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 19268069.0, 7544230.0),
    ('42ee211e-e647-11ec-bd63-2e606fd75d8d', '2023-07-03 07:00:00', '2023-07-03 11:40:00', 524838.0, 667018.0),
    ('70164efe-f5ec-11ed-bd79-8219b1801b1f', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 10305111.0, 10786239.0),
    ('c80846c0-599a-11ec-bdd3-2e8cb5685b8f', '2023-07-03 07:00:00', '2023-07-03 14:50:00', 7194459.0, 7638011.0),
    ('d4983d88-d703-11eb-bfe1-1a403648e7b3', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 39917.0, 33161.0),
    ('aa3004ac-5cab-11ed-bff6-2ea29cd56b83', '2023-07-03 07:00:00', '2023-07-03 18:00:00', 2209854.0, 6953681.0)
]


MONGO_DB_COLLECTION = {
    'mongo_str': 'mongodb://10.13.2.111:27017,10.13.2.112:27017/flow_snmp',
    'db': 'flow_snmp',
    'conn_name': "flow_data",
    'time': 300
}
FLOW_TABLE_NAME = "flow_data_local_new"
client = pymongo.MongoClient(MONGO_DB_COLLECTION.get('mongo_str'))
db = client[MONGO_DB_COLLECTION.get('db')]
collection = db[MONGO_DB_COLLECTION.get('conn_name')]

from clickhouse_driver import Client
CK_HOST = "10.13.133.135"
CK_USER = "flowdata"
CK_PASSWORD = "wVen6RK3KpkpGdsA"
CK_DB_ANME = "flow_snmp"
CK_PORT = 9000
ck_client = Client(host=CK_HOST, port=CK_PORT, user=CK_USER, password=CK_PASSWORD)

no_data_set = set()


def add_data(pipe_id, start_time, end_time):
    """通过start_time开始自动查找需要补充的数据节点，并取出前一周对应时间节点上的流量数据进行补充

    Args:
        db_name ([type]): [description]
        conn ([type]): [description]
        pipe_id ([type]): [description]
    """

    start_time = datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S') - timedelta(hours=1)
    end_time = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S') + timedelta(hours=1)
    # 获取指定时间之后的第一个计量数据信息（指定的时间不一定是计量时间节点）
    res_data = list(collection.find({'pipe_id': pipe_id, 'time': {"$gte": start_time}}).sort(
        "time", pymongo.ASCENDING).limit(1))

    if not res_data:
        logger.info("MongoDB中没有找到pipe ： {} ,在 {} 之后的任何数据，请检查数据！".format(pipe_id, start_time))
        return

    # 将指定时间之后的第一组计量数据作为起点开始进行数据检查
    start_time = res_data[0].get('time')

    time_interval = MONGO_DB_COLLECTION.get('time')
    next_time = start_time
    temp_time = end_time
    fix_list = []
    while next_time < end_time:
        res_data = list(collection.find({'pipe_id': pipe_id, 'time': {
            "$gt": next_time,
            "$lte": next_time + timedelta(seconds=time_interval)
        }}).limit(1))
        if not res_data:
            res_data = list(collection.find({'pipe_id': pipe_id, 'time': {"$gt": next_time}}).sort(
                "time", pymongo.ASCENDING).limit(1))
            if res_data:
                temp_time = res_data[0].get('time')

            logger.info('pipe : {} ,从 {} 到 {} 区间的计量缺失需要补充'.format(pipe_id, next_time, temp_time))
            fix_list.append((next_time, temp_time))
            next_time = temp_time
            continue

        next_time += timedelta(seconds=time_interval)

    # 开始补充next_time到end_time之间的数据
    mongo_data_list = []
    ck_data_list = []
    for fix in fix_list:
        next_time = fix[0] + timedelta(seconds=time_interval)
        end_time = fix[1]
        while next_time < end_time:
            time_list = [next_time + timedelta(days=0 - index) for index in range(1, 8)]
            flow_list = list(collection.find(
                {'pipe_id': pipe_id, 'time': {'$in': time_list}}, {'out_bps': 1, 'in_bps': 1, 'time': 1, '_id': 0}))

            if not flow_list:
                logger.info("pipe : {} 找不到历史计量数据 : {}".format(pipe_id, next_time))
                next_time += timedelta(seconds=time_interval)
                no_data_set.add(pipe_id)
                continue

            out_bps_total = 0
            in_bps_total = 0
            for flow in flow_list:
                out_bps_total += flow.get('out_bps')
                in_bps_total += flow.get('in_bps')

            # logger.info("pipe : {}, 历史数据为 : {}".format(pipe_id, flow_list))

            in_bps = float(format(in_bps_total / len(flow_list), '.3f'))
            out_bps = float(format(out_bps_total / len(flow_list), '.3f'))
            mongo_data_list.append({
                "time": next_time,
                "in_bps": in_bps,
                "out_bps": out_bps,
                "pipe_id": pipe_id
            })
            ck_data_list.append([pipe_id, next_time, in_bps, out_bps])
            # logger.info("pipe : {} time : {} 计算完成 in : {}, out : {}".format(pipe_id, next_time, in_bps, out_bps))
            # logger.info("pipe : {} time : {} 数据为 in : {}, out : {}\n".format(pipe_id, flow_list[0].get('time'), flow_list[0].get('in_bps'), flow_list[0].get('out_bps')))
            next_time += timedelta(seconds=time_interval)

        if mongo_data_list:
            count = (fix[1] - fix[0]).seconds / 300 + 1
            logger.info('pipe : {} 应该补充 {} 组数据，实际会补充 {} 组数据, 时间区间 ： {} - {}!'.format(
                pipe_id, count, len(mongo_data_list), fix[0], fix[1]))

            # logger.info('pipe : {} 将会补充 {} 组数据, 截止时间为 ： {}!'.format(pipe_id, len(mongo_data_list), mongo_data_list[-1].get('time')))
            insert_sql = f"insert into {CK_DB_ANME}.{FLOW_TABLE_NAME} (pipe_id, time, in_bps, out_bps) VALUES"
            ck_client.execute(insert_sql, ck_data_list)
            result = collection.insert_many(mongo_data_list)
            logger.info("pipe : {} insert res : {}".format(pipe_id, len(result.inserted_ids)))
            ck_data_list = []
            mongo_data_list = []

    # insert_sql = f"insert into {CK_DB_ANME}.{FLOW_TABLE_NAME} (pipe_id, time, in_bps, out_bps) VALUES"
    # ck_client.execute(insert_sql, ck_data_list)
    # result = collection.insert_many(mongo_data_list)
    # logger.info("pipe : {} insert res : {}".format(pipe_id, len(result.inserted_ids)))


for data_info in data_list:
    pipe_id, start_time, end_time, _, _ = data_info
    add_data(pipe_id, start_time, end_time)


ck_client.disconnect()
print(no_data_set)
